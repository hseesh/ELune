package cn.daxiang.lyltd.gameserver.module.${table.name}.facade.impl;

import cn.daxiang.framework.extend.KeyValue;
import cn.daxiang.framework.identity.IdentiyKey;
import cn.daxiang.framework.result.CollectionResult;
import cn.daxiang.framework.result.Result;
import cn.daxiang.framework.result.TResult;
import cn.daxiang.framework.utils.DateUtils;
import cn.daxiang.framework.utils.NumberUtils;
import cn.daxiang.framework.utils.RandomUtils;
import cn.daxiang.framework.utils.TimeConstant;
import cn.daxiang.lyltd.gameserver.core.GameBaseFacade;
import cn.daxiang.lyltd.gameserver.core.GameConfig;
import cn.daxiang.lyltd.gameserver.core.database.table.Goods;
import cn.daxiang.lyltd.gameserver.core.database.table.${table.name.substring(0, 1).toUpperCase()}${table.name.substring(1)};
import cn.daxiang.lyltd.gameserver.core.database.table.${table.name.substring(0, 1).toUpperCase()}${table.name.substring(1)}Platform;
import cn.daxiang.lyltd.gameserver.core.dataconfig.convert.impl.*;
import cn.daxiang.lyltd.gameserver.core.dataconfig.model.*;
import cn.daxiang.lyltd.gameserver.core.dataconfig.service.${table.name.substring(0, 1).toUpperCase()}${table.name.substring(1)}ConfigService;
import cn.daxiang.lyltd.gameserver.core.dispatch.DispatchHelper;
import cn.daxiang.lyltd.gameserver.core.event.impl.*;
import cn.daxiang.lyltd.gameserver.core.oss.GameOssLogger;
import cn.daxiang.lyltd.gameserver.core.oss.type.OperationType;
import cn.daxiang.lyltd.gameserver.module.goods.facade.GoodsFacade;
import cn.daxiang.lyltd.gameserver.module.goods.helper.RewardHelper;
import cn.daxiang.lyltd.gameserver.module.goods.parser.effect.GoodsEffectContext;
import cn.daxiang.lyltd.gameserver.module.goods.parser.effect.GoodsEffectParser;
import cn.daxiang.lyltd.gameserver.module.goods.type.GoodsSubType;
import cn.daxiang.lyltd.gameserver.module.goods.type.GoodsType;
import cn.daxiang.lyltd.gameserver.module.lineup.helper.LineupHelper;
import cn.daxiang.lyltd.gameserver.module.${table.name}.dao.${table.name.substring(0, 1).toUpperCase()}${table.name.substring(1)}Dao;
import cn.daxiang.lyltd.gameserver.module.${table.name}.facade.${table.name.substring(0, 1).toUpperCase()}${table.name.substring(1)}Facade;
import cn.daxiang.lyltd.gameserver.module.${table.name}.helper.${table.name.substring(0, 1).toUpperCase()}${table.name.substring(1)}PushHelper;
import cn.daxiang.lyltd.gameserver.module.user.helper.ActorHelper;
import cn.daxiang.lyltd.gameserver.module.user.type.ActorUnlockType;
import cn.daxiang.shared.GlobalConfigKey;
import cn.daxiang.shared.module.lineup.SpriteAttributeType;
import cn.daxiang.shared.reward.RewardObject;
import cn.daxiang.shared.reward.RewardResult;
import cn.daxiang.shared.reward.RewardType;
import com.google.common.collect.Lists;
import com.google.common.collect.Maps;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import java.util.*;
import java.util.concurrent.TimeUnit;

/**
 * ${table.comment}
 *
 * @author $!{author}
 * @since ${now}
 */
@Component
public class ${table.name.substring(0, 1).toUpperCase()}${table.name.substring(1)}FacadeImpl extends GameBaseFacade implements ${table.name.substring(0, 1).toUpperCase()}${table.name.substring(1)}Facade {
    @Autowired
    private ${table.name.substring(0, 1).toUpperCase()}${table.name.substring(1)}Dao ${table.name}Dao;
    @Autowired
    private ${table.name.substring(0, 1).toUpperCase()}${table.name.substring(1)}PlatformDao ${table.name}PlatformDao;
    @Autowired
    private GoodsFacade goodsFacade;
    @Autowired
    private GoodsEffectContext goodsEffectContext;

    @Override
    public Collection<${table.name.substring(0, 1).toUpperCase()}${table.name.substring(1)}> get${table.name.substring(0, 1).toUpperCase()}${table.name.substring(1)}List(long actorId) {
        return ${table.name}Dao.get${table.name.substring(0, 1).toUpperCase()}${table.name.substring(1)}List(actorId);
    }

    @Override
    public TResult<${table.name.substring(0, 1).toUpperCase()}${table.name.substring(1)}> get${table.name.substring(0, 1).toUpperCase()}${table.name.substring(1)}(long actorId, long ${table.name}Id) {
        ${table.name.substring(0, 1).toUpperCase()}${table.name.substring(1)} ${table.name} = ${table.name}Dao.get${table.name.substring(0, 1).toUpperCase()}${table.name.substring(1)}(actorId, ${table.name}Id);
        if (${table.name} == null) {
            return TResult.valueOf(${table.name.toUpperCase()}_NOT_FOUND);
        }
        return TResult.sucess(${table.name});
    }


    @Override
    public CollectionResult<${table.name.substring(0, 1).toUpperCase()}${table.name.substring(1)}> create${table.name.substring(0, 1).toUpperCase()}${table.name.substring(1)}(long actorId, Map<Integer, Long> data, OperationType operationType) {
        int level = globalConfigService.findGlobalConfig(GlobalConfigKey.HERO_INIT_LEVEL).findInt();
        Collection<${table.name.substring(0, 1).toUpperCase()}${table.name.substring(1)}> ${table.name}List = Lists.newArrayList();
        for (Map.Entry<Integer, Long> entry : data.entrySet()) {
            int id = entry.getKey();
            long count = entry.getValue();
            ${table.name.substring(0, 1).toUpperCase()}${table.name.substring(1)}Config ${table.name}Config = globalConfigService.findConfig(id, ${table.name.substring(0, 1).toUpperCase()}${table.name.substring(1)}Config.class);
            if (${table.name}Config == null) {
                LOGGER.error("${table.name.substring(0, 1).toUpperCase()}${table.name.substring(1)}Config not found, id:{}", id);
                continue;
            }
            for (int i = 0; i < count; i++) {
                ${table.name.substring(0, 1).toUpperCase()}${table.name.substring(1)} ${table.name} = ${table.name}Dao.create${table.name.substring(0, 1).toUpperCase()}${table.name.substring(1)}(actorId, id, level, aptitude, attributeAptitudeMap);
                GameOssLogger.goodsAdd(actorId, operationType, RewardType.${table.name.toUpperCase()}, ${table.name}.get${table.name.substring(0, 1).toUpperCase()}${table.name.substring(1)}Id(), ${table.name}.getConfigId(), 1, 1);
                ${table.name}List.add(${table.name});
            }
        }
        ${table.name.substring(0, 1).toUpperCase()}${table.name.substring(1)}PushHelper.push${table.name.substring(0, 1).toUpperCase()}${table.name.substring(1)}(actorId, ${table.name}List);
        return CollectionResult.collection(${table.name}List);
    }
    
    @Override
    public Result ${table.name}Level(long actorId, long id) {
        TResult<${table.name.substring(0, 1).toUpperCase()}${table.name.substring(1)}> ${table.name}Result = this.get${table.name.substring(0, 1).toUpperCase()}${table.name.substring(1)}(actorId, id);
        if (${table.name}Result.isFail()) {
            return Result.valueOf(${table.name}Result.statusCode);
        }
        ${table.name.substring(0, 1).toUpperCase()}${table.name.substring(1)} ${table.name} = ${table.name}Result.item;
        Result costResult = RewardHelper.decrease(actorId, ${table.name}LevelConfig.getCostList(), OperationType.${table.name.toUpperCase()}_LEVEL);
        if (costResult.isFail()) {
            return costResult;
        }
        ${table.name}.setLevel(${table.name}.getLevel() + 1);
        dbQueue.updateQueue(${table.name});
        ${table.name.substring(0, 1).toUpperCase()}${table.name.substring(1)}PushHelper.push${table.name.substring(0, 1).toUpperCase()}${table.name.substring(1)}(${table.name});
        this.refreshPower(actorId, id);
        return Result.valueOf();
    }

    @Override
    public Result ${table.name}StarLevel(long actorId, long id, Collection<Long> devourIds) {
        Result result = ActorHelper.unlock(actorId, ActorUnlockType.${table.name.toUpperCase()});
        if (result.isFail()) {
            return result;
        }
        TResult<${table.name.substring(0, 1).toUpperCase()}${table.name.substring(1)}> ${table.name}Result = this.get${table.name.substring(0, 1).toUpperCase()}${table.name.substring(1)}(actorId, id);
        if (${table.name}Result.isFail()) {
            return Result.valueOf(${table.name}Result.statusCode);
        }
        ${table.name.substring(0, 1).toUpperCase()}${table.name.substring(1)} ${table.name} = ${table.name}Result.item;
        if (LineupHelper.${table.name}InLineup(actorId, devourIds) || devourIds.contains(id)) {
            return Result.valueOf(${table.name.toUpperCase()}_IN_LINEUP);
        }
        ${table.name.substring(0, 1).toUpperCase()}${table.name.substring(1)}StarConfig starConfig = globalConfigService.findConfig(IdentiyKey.build(${table.name}.getConfigId(), ${table.name}.getStarLevel()), ${table.name.substring(0, 1).toUpperCase()}${table.name.substring(1)}StarConfig.class);
        if (starConfig == null) {
            LOGGER.error("${table.name.substring(0, 1).toUpperCase()}${table.name.substring(1)}StarConfig not found, id:{},level:{}", ${table.name}.getConfigId(), ${table.name}.getStarLevel());
            return Result.valueOf(CONFIG_NOT_FOUND);
        }
        ${table.name.substring(0, 1).toUpperCase()}${table.name.substring(1)}StarConfig nextStarConfig = globalConfigService.findConfig(IdentiyKey.build(${table.name}.getConfigId(), ${table.name}.getStarLevel() + 1), ${table.name.substring(0, 1).toUpperCase()}${table.name.substring(1)}StarConfig.class);
        if (nextStarConfig == null) {
            LOGGER.error("${table.name.substring(0, 1).toUpperCase()}${table.name.substring(1)}StarConfig not found, id:{},level:{}", ${table.name}.getConfigId(), ${table.name}.getStarLevel() + 1);
            return Result.valueOf(CONFIG_NOT_FOUND);
        }
        if (devourIds.size() != starConfig.getDevourCount()) {
            return Result.valueOf(INVALID_PARAM);
        }
        for (Long devourId : devourIds) {
            ${table.name.substring(0, 1).toUpperCase()}${table.name.substring(1)} devour = ${table.name}Dao.get${table.name.substring(0, 1).toUpperCase()}${table.name.substring(1)}(actorId, devourId);
            if (devour == null || devour.getConfigId() != ${table.name}.getConfigId() || !this.isDefaults(devour)) {
                return Result.valueOf(INVALID_PARAM);
            }
        }
        Result costResult = RewardHelper.decrease(actorId, starConfig.getCostList(), OperationType.${table.name.toUpperCase()}_STAR_LEVEL);
        if (costResult.isFail()) {
            return costResult;
        }
        this.delete${table.name.substring(0, 1).toUpperCase()}${table.name.substring(1)}(actorId, devourIds, OperationType.${table.name.toUpperCase()}_STAR_LEVEL);
        ${table.name}.setStarLevel(${table.name}.getStarLevel() + 1);
        dbQueue.updateQueue(${table.name});
        ${table.name.substring(0, 1).toUpperCase()}${table.name.substring(1)}PushHelper.push${table.name.substring(0, 1).toUpperCase()}${table.name.substring(1)}(${table.name});
        this.refreshPower(actorId, id);
        return Result.valueOf();
    }

    @Override
    public Result ${table.name}AdvanceLevel(long actorId, long id, Map<Long, Integer> goods, Collection<Long> devourIds) {
        Result advanceResult = ActorHelper.unlock(actorId, ActorUnlockType.${table.name.toUpperCase()}_ADVANCE);
        if (advanceResult.isFail()) {
            return advanceResult;
        }
        if (goods.isEmpty() && devourIds.isEmpty()) {
            return Result.valueOf(INVALID_PARAM);
        }
        if (LineupHelper.${table.name}InLineup(actorId, devourIds) || devourIds.contains(id)) {
            return Result.valueOf(INVALID_PARAM);
        }
        TResult<${table.name.substring(0, 1).toUpperCase()}${table.name.substring(1)}> ${table.name}Result = this.get${table.name.substring(0, 1).toUpperCase()}${table.name.substring(1)}(actorId, id);
        if (${table.name}Result.isFail()) {
            return Result.valueOf(${table.name}Result.statusCode);
        }
        ${table.name.substring(0, 1).toUpperCase()}${table.name.substring(1)} ${table.name} = ${table.name}Result.item;
        int aptitudeLimit = globalConfigService.findGlobalConfig(GlobalConfigKey.${table.name.toUpperCase()}_ADVANCE_QUALITY_LIMIT).findInt();
        ${table.name.substring(0, 1).toUpperCase()}${table.name.substring(1)}Config ${table.name}Config = globalConfigService.findConfig(${table.name}.getConfigId(), ${table.name.substring(0, 1).toUpperCase()}${table.name.substring(1)}Config.class);
        if (${table.name}Config == null) {
            return Result.valueOf(CONFIG_NOT_FOUND);
        }
        if (${table.name}Config.getQuality() < aptitudeLimit) {
            return Result.valueOf(${table.name.toUpperCase()}_APTITUDE_ERROR);
        }
        ${table.name.substring(0, 1).toUpperCase()}${table.name.substring(1)}AdvanceConfig nextLevelConfig = globalConfigService.findConfig(IdentiyKey.build(${table.name}.getConfigId(), ${table.name}.getAdvanceLevel() + 1), ${table.name.substring(0, 1).toUpperCase()}${table.name.substring(1)}AdvanceConfig.class);
        if (nextLevelConfig == null) {
            return Result.valueOf(${table.name.toUpperCase()}_ADVANCE_MAX_LEVEL);
        }
        TResult<Integer> checkGoodsResult = this.checkAdvanceExpGoods(actorId, goods);
        if (checkGoodsResult.isFail()) {
            return Result.valueOf(checkGoodsResult.statusCode);
        }
        int calcExp = checkGoodsResult.item;
        if (!devourIds.isEmpty()) {
            TResult<Integer> checkDevoured${table.name.substring(0, 1).toUpperCase()}${table.name.substring(1)}s = this.getDevourAdvanceExp(actorId, devourIds);
            if (checkDevoured${table.name.substring(0, 1).toUpperCase()}${table.name.substring(1)}s.isFail()) {
                return Result.valueOf(checkDevoured${table.name.substring(0, 1).toUpperCase()}${table.name.substring(1)}s.statusCode);
            }
            calcExp += checkDevoured${table.name.substring(0, 1).toUpperCase()}${table.name.substring(1)}s.item;
        }
        TResult<KeyValue<Integer, Integer>> valueTResult = this.addAdvanceExp(${table.name}.getConfigId(), ${table.name}.getAdvanceLevel(), ${table.name}.getAdvanceExp(), calcExp);
        if (valueTResult.isFail()) {
            return Result.valueOf(valueTResult.statusCode);
        }
        if (!devourIds.isEmpty()) {
            this.delete${table.name.substring(0, 1).toUpperCase()}${table.name.substring(1)}(actorId, devourIds, OperationType.${table.name.toUpperCase()}_ADVANCE_LEVEL);
        }
        goods.forEach((k, v) -> goodsFacade.decreaseGoods(actorId, k, v, OperationType.${table.name.toUpperCase()}_ADVANCE_LEVEL));
        KeyValue<Integer, Integer> addResult = valueTResult.item;
        ${table.name}.levelUp(addResult);
        dbQueue.updateQueue(${table.name});
        ${table.name.substring(0, 1).toUpperCase()}${table.name.substring(1)}PushHelper.push${table.name.substring(0, 1).toUpperCase()}${table.name.substring(1)}(${table.name});
        this.refreshPower(actorId, id);
        return Result.valueOf();
    }

    /**
     *  获取宠物被吞噬后返回的总经验
     * @param actorId
     * @param ${table.name}s
     * @return
     */
    private TResult<Integer> getDevourAdvanceExp(long actorId, Collection<Long> ${table.name}s) {
        int calcExp = 0;
        for (Long id : ${table.name}s) {
            ${table.name.substring(0, 1).toUpperCase()}${table.name.substring(1)} ${table.name} = ${table.name}Dao.get${table.name.substring(0, 1).toUpperCase()}${table.name.substring(1)}(actorId, id);
            if (${table.name} == null) {
                return TResult.valueOf(${table.name.toUpperCase()}_NOT_FOUND);
            }
            if (!isDefaults(${table.name})) {
                return TResult.valueOf(${table.name.toUpperCase()}_PROGRESS_ERROR);
            }
            ${table.name.substring(0, 1).toUpperCase()}${table.name.substring(1)}Config config = globalConfigService.findConfig(${table.name}.getConfigId(), ${table.name.substring(0, 1).toUpperCase()}${table.name.substring(1)}Config.class);
            if (config == null) {
                LOGGER.error("${table.name} config not found ${table.name}Id:{}", ${table.name}.get${table.name.substring(0, 1).toUpperCase()}${table.name.substring(1)}Id());
                return TResult.valueOf(CONFIG_NOT_FOUND);
            }
            calcExp += config.getAdvanceExp();
        }
        return TResult.sucess(calcExp);
    }

    /**
     * 增加进阶经验
     *
     * @param configId 配置Id
     * @param level    进阶等级
     * @param exp      现在的进阶经验值
     * @param addExp   物品计算值
     * @return 【等级，经验】
     */
    public TResult<KeyValue<Integer, Integer>> addAdvanceExp(int configId, int level, int exp, int addExp) {
        KeyValue<Integer, Integer> keyValue = new KeyValue<>();
        do {
            ${table.name.substring(0, 1).toUpperCase()}${table.name.substring(1)}AdvanceConfig config = globalConfigService.findConfig(IdentiyKey.build(configId, level + 1), ${table.name.substring(0, 1).toUpperCase()}${table.name.substring(1)}AdvanceConfig.class);
            if (config == null) {
                int maxOverExp = globalConfigService.findGlobalConfig(GlobalConfigKey.${table.name.toUpperCase()}ADVANCE_EXP_OVER_LIMIT).findInt();
                if (addExp > maxOverExp) {
                    return TResult.valueOf(${table.name.toUpperCase()}_ADVANCE_OVER_MAX_EXP);
                } else {
                    exp += addExp;
                }
                break;
            }
            if ((exp + addExp) >= config.getExp()) {
                int temp = config.getExp() - exp;
                addExp -= temp;
                exp += temp;
                level++;
            } else {
                exp += addExp;
                break;
            }
        } while (addExp > 0);
        keyValue.setKey(level);
        keyValue.setValue(exp);
        return TResult.sucess(keyValue);
    }


    /**
     * 检查经验物品
     *
     * @param actorId
     * @param goodsMap
     * @return
     */
    private TResult<Integer> checkAdvanceExpGoods(long actorId, Map<Long, Integer> goodsMap) {
        int exp = 0;
        for (Map.Entry<Long, Integer> entry : goodsMap.entrySet()) {
            Result result = goodsFacade.hasEnoughGoods(actorId, entry.getKey(), entry.getValue());
            if (result.isFail()) {
                return TResult.valueOf(result);
            }
            TResult<Goods> goodsResult = goodsFacade.getGoods(actorId, entry.getKey());
            if (goodsResult.isFail()) {
                return TResult.valueOf(GOODS_NOT_FOUND);
            }
            GoodsConfig goodsConfig = globalConfigService.findConfig(goodsResult.item.getGoodsId(), GoodsConfig.class);
            if (goodsConfig == null) {
                return TResult.valueOf(CONFIG_NOT_FOUND);
            }
            if (goodsConfig.getGoodsType() != GoodsType.RESOURCE || goodsConfig.getGoodsSubType() != GoodsSubType.${table.name.toUpperCase()}_ADVANCE_LEVEL) {
                return TResult.valueOf(GOODS_TYPE_ERROR);
            }
            exp += goodsConfig.calcEffectValue() * entry.getValue();
        }
        return TResult.sucess(exp);
    }


    /**
     * 刷新战力
     *
     * @param actorId
     * @param ${table.name}Id
     */
    private void refreshPower(long actorId, long ${table.name}Id) {
        if (LineupHelper.${table.name}InLineup(actorId, Lists.newArrayList(${table.name}Id))) {
            DispatchHelper.postEvent(new LineupPowerRefreshEvent(actorId));
        }
    }

    /**
     * 删除${table.comment}列表
     *
     * @param actorId
     * @param ids
     * @param operationType
     */
    private void delete${table.name.substring(0, 1).toUpperCase()}${table.name.substring(1)}(long actorId, Collection<Long> ids, OperationType operationType) {
        ${table.name}Dao.delete${table.name.substring(0, 1).toUpperCase()}${table.name.substring(1)}(actorId, ids, operationType);
        ${table.name.substring(0, 1).toUpperCase()}${table.name.substring(1)}PushHelper.push${table.name.substring(0, 1).toUpperCase()}${table.name.substring(1)}Delete(actorId, ids);
    }

    /**
     * 是否是默认,初始状态
     *
     * @param ${table.name}
     * @return
     */
    private boolean isDefaults(${table.name.substring(0, 1).toUpperCase()}${table.name.substring(1)} ${table.name}) {
        int level = globalConfigService.findGlobalConfig(GlobalConfigKey.HERO_INIT_LEVEL).findInt();
        if (${table.name}.getLevel() > level || ${table.name}.getStarLevel() > 0 || ${table.name}.getAdvanceExp() > 0) {
            return false;
        }
        return true;
    }

    @Override
    public CollectionResult<RewardObject> smeltPreview(long actorId, Collection<Long> ids, Collection<Long> fragmentIds) {
        return getReturnReward(actorId, ids, fragmentIds, OperationType.${table.name.toUpperCase()}_SMELT);
    }

    @Override
    public TResult<RewardResult> smelt(long actorId, Collection<Long> ids, Collection<Long> fragmentIds) {
        CollectionResult<RewardObject> collectionResult = this.smeltPreview(actorId, ids, fragmentIds);
        if (collectionResult.isFail()) {
            return TResult.valueOf(collectionResult.statusCode);
        }
        this.delete${table.name.substring(0, 1).toUpperCase()}${table.name.substring(1)}(actorId, ids, OperationType.${table.name.toUpperCase()}_SMELT);
        for (long fragmentId : fragmentIds) {
            TResult<Goods> goods = goodsFacade.getGoods(actorId, fragmentId);
            if (goods.isFail()) {
                continue;
            }
            goodsFacade.decreaseGoods(actorId, fragmentId, goods.item.getNum(), OperationType.${table.name.toUpperCase()}_SMELT);
        }
        RewardResult result = RewardHelper.sendRewardList(actorId, collectionResult.item, OperationType.${table.name.toUpperCase()}_SMELT);
        DispatchHelper.postEvent(new ${table.name.substring(0, 1).toUpperCase()}${table.name.substring(1)}RebirthEvent(actorId));
        return TResult.sucess(result);
    }

    @Override
    public CollectionResult<RewardObject> rebirthPreview(long actorId, long id) {
        return getReturnReward(actorId, Lists.newArrayList(id), Collections.emptyList(), OperationType.${table.name.toUpperCase()}_REBIRTH);
    }

    @Override
    public TResult<RewardResult> rebirth(long actorId, long id) {
        TResult<${table.name.substring(0, 1).toUpperCase()}${table.name.substring(1)}> ${table.name}Result = this.get${table.name.substring(0, 1).toUpperCase()}${table.name.substring(1)}(actorId, id);
        if (${table.name}Result.isFail()) {
            return TResult.valueOf(${table.name}Result.statusCode);
        }
        ${table.name.substring(0, 1).toUpperCase()}${table.name.substring(1)} ${table.name} = ${table.name}Result.item;
        CollectionResult<RewardObject> collectionResult = this.rebirthPreview(actorId, id);
        if (collectionResult.isFail()) {
            return TResult.valueOf(collectionResult.statusCode);
        }
        List<RewardObject> costList = globalConfigService.findGlobalObject(GlobalConfigKey.REBIRTH_COST, RewardObjectListConfig.class).getVs();
        Result decreaseResult = RewardHelper.decrease(actorId, costList, OperationType.${table.name.toUpperCase()}_REBIRTH);
        if (decreaseResult.isFail()) {
            return TResult.valueOf(decreaseResult.statusCode);
        }
        int level = globalConfigService.findGlobalConfig(GlobalConfigKey.HERO_INIT_LEVEL).findInt();
        dbQueue.updateQueue(${table.name});
        ${table.name.substring(0, 1).toUpperCase()}${table.name.substring(1)}PushHelper.push${table.name.substring(0, 1).toUpperCase()}${table.name.substring(1)}(${table.name});
        DispatchHelper.postEvent(new ${table.name.substring(0, 1).toUpperCase()}${table.name.substring(1)}RebirthEvent(actorId));
        RewardResult result = RewardHelper.sendRewardList(actorId, collectionResult.item, OperationType.${table.name.toUpperCase()}_REBIRTH);
        return TResult.sucess(result);
    }

    private CollectionResult<RewardObject> getReturnReward(long actorId, Collection<Long> ids, Collection<Long> fragmentIds, OperationType operationType) {
        if (LineupHelper.${table.name}InLineup(actorId, ids)) {
            return CollectionResult.valueOf(${table.name.toUpperCase()}_IN_LINEUP);
        }
        List<RewardObject> rewardList = Lists.newArrayList();
        int level = globalConfigService.findGlobalConfig(GlobalConfigKey.HERO_INIT_LEVEL).findInt();
        for (Long id : ids) {
            TResult<${table.name.substring(0, 1).toUpperCase()}${table.name.substring(1)}> ${table.name}Result = this.get${table.name.substring(0, 1).toUpperCase()}${table.name.substring(1)}(actorId, id);
            if (${table.name}Result.isFail()) {
                return CollectionResult.valueOf(${table.name}Result.statusCode);
            }
            ${table.name.substring(0, 1).toUpperCase()}${table.name.substring(1)} ${table.name} = ${table.name}Result.item;
            ${table.name.substring(0, 1).toUpperCase()}${table.name.substring(1)}Config ${table.name}Config = globalConfigService.findConfig(${table.name}.getConfigId(), ${table.name.substring(0, 1).toUpperCase()}${table.name.substring(1)}Config.class);
            if (${table.name}Config == null) {
                LOGGER.error("${table.name.substring(0, 1).toUpperCase()}${table.name.substring(1)}Config not found, id:{}", ${table.name}.getConfigId());
                return CollectionResult.valueOf(CONFIG_NOT_FOUND);
            }
            if (operationType == OperationType.${table.name.toUpperCase()}_SMELT) {
                rewardList.addAll(${table.name}Config.getDecomposeRewardList());
            }
            for (int i = level; i < ${table.name}.getLevel(); i++) {
                ${table.name.substring(0, 1).toUpperCase()}${table.name.substring(1)}LevelConfig ${table.name}LevelConfig = globalConfigService.findConfig(IdentiyKey.build(${table.name}.getConfigId(), i), ${table.name.substring(0, 1).toUpperCase()}${table.name.substring(1)}LevelConfig.class);
                if (${table.name}LevelConfig == null) {
                    LOGGER.error("${table.name.substring(0, 1).toUpperCase()}${table.name.substring(1)}LevelConfig not found, id:{},level:{}", ${table.name}.getConfigId(), ${table.name}.getLevel());
                    return CollectionResult.valueOf(CONFIG_NOT_FOUND);
                }
                rewardList.addAll(${table.name}LevelConfig.getCostList());
            }
            for (int i = 0; i < ${table.name}.getStarLevel(); i++) {
                ${table.name.substring(0, 1).toUpperCase()}${table.name.substring(1)}StarConfig starConfig = globalConfigService.findConfig(IdentiyKey.build(${table.name}.getConfigId(), i), ${table.name.substring(0, 1).toUpperCase()}${table.name.substring(1)}StarConfig.class);
                if (starConfig == null) {
                    LOGGER.error("${table.name.substring(0, 1).toUpperCase()}${table.name.substring(1)}StarConfig not found, id:{},level:{}", ${table.name}.getConfigId(), i);
                    return CollectionResult.valueOf(CONFIG_NOT_FOUND);
                }
                rewardList.addAll(starConfig.getCostList());
                if (starConfig.getDevourCount() > 0) {
                    rewardList.add(RewardObject.valueOf(RewardType.${table.name.toUpperCase()}, ${table.name}.getConfigId(), starConfig.getDevourCount()));
                }
            }

            int advanceExp = ${table.name}.getAdvanceExp();
            if (advanceExp > 0) {
                List<Integer> goodsIdList = globalConfigService.findGlobalConfig(GlobalConfigKey.${table.name.toUpperCase()}_ADVANCE_MUTILE_ARRAY).getIntList();
                ArrayList<Integer> resultIds = new ArrayList<>();
                HashMap<Integer, Integer> map = new HashMap<>();
                for (Integer goodsId : goodsIdList) {
                    GoodsConfig goodsConfig = globalConfigService.findConfig(goodsId, GoodsConfig.class);
                    if (goodsConfig == null) {
                        return CollectionResult.valueOf(CONFIG_NOT_FOUND);
                    }
                    resultIds.add(goodsConfig.calcEffectValue());
                    map.put(goodsConfig.calcEffectValue(), goodsConfig.getGoodsId());
                }
                Collections.sort(resultIds);
                for (int i = resultIds.size() - 1; i > -1 && advanceExp >= resultIds.get(0); i--) {
                    if (advanceExp < resultIds.get(i)) {
                        continue;
                    }
                    int num = advanceExp / resultIds.get(i);
                    advanceExp = advanceExp % resultIds.get(i);
                    rewardList.add(RewardObject.valueOf(RewardType.GOODS, map.get(resultIds.get(i)), num));
                }
            }

        }
        RewardObjectListTreeMapConfig ${table.name}FragmentDecomposeRewardMap = globalConfigService.findGlobalObject(GlobalConfigKey.${table.name.toUpperCase()}_FRAGMENT_DECOMPOSE_REWARD,
                RewardObjectListTreeMapConfig.class);
        for (long goodsUid : fragmentIds) {
            TResult<Goods> goods = goodsFacade.getGoods(actorId, goodsUid);
            if (goods.isFail()) {
                return CollectionResult.valueOf(GOODS_NOT_ENOUGH);
            }
            ${table.name.substring(0, 1).toUpperCase()}${table.name.substring(1)}Config ${table.name}Config = ${table.name.substring(0, 1).toUpperCase()}${table.name.substring(1)}ConfigService.get${table.name.substring(0, 1).toUpperCase()}${table.name.substring(1)}ConfigByFragment(goods.item.getGoodsId());
            if (${table.name}Config == null) {
                return CollectionResult.valueOf(CONFIG_NOT_FOUND);
            }
            Collection<RewardObject> ${table.name}FragmentDecomposeRewardList = ${table.name}FragmentDecomposeRewardMap.getRewardListByFloorKey(${table.name}Config.getQuality());
            if (${table.name}FragmentDecomposeRewardList == null) {
                return CollectionResult.valueOf(CONFIG_NOT_FOUND);
            }
            for (RewardObject ${table.name}FragmentDecomposeReward : ${table.name}FragmentDecomposeRewardList) {
                rewardList.add(RewardObject.valueOf(${table.name}FragmentDecomposeReward.getType(), ${table.name}FragmentDecomposeReward.getId(), ${table.name}FragmentDecomposeReward.getCount() * goods.item.getNum()));
            }
        }
        return CollectionResult.collection(RewardHelper.groupByTypeAndId(rewardList));
    }
}
