package cn.daxiang.lyltd.gameserver.module.${table.name}.dao.impl;

import cn.daxiang.framework.database.MultiEntity;
import cn.daxiang.framework.database.dao.MultiEntityDaoImpl;
import cn.daxiang.framework.identity.IdentiyKey;
import cn.daxiang.lyltd.gameserver.core.GameConfig;
import cn.daxiang.lyltd.gameserver.core.database.IdGenerator;
import cn.daxiang.lyltd.gameserver.core.database.UniqueId;
import cn.daxiang.lyltd.gameserver.core.database.table.${table.name.substring(0, 1).toUpCase()};
import cn.daxiang.lyltd.gameserver.core.oss.GameOssLogger;
import cn.daxiang.lyltd.gameserver.core.oss.type.OperationType;
import cn.daxiang.lyltd.gameserver.module.pet.dao.${table.name.substring(0, 1).toUpCase()}Dao;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import java.util.Collection;
import java.util.List;
import java.util.Map;
import java.util.concurrent.atomic.AtomicLong;

/**
 * ${comment}
 * @author $!{email}
 * @since ${NOW}
 */
@Comment
public class ${table.name.substring(0, 1).toUpCase()}${table.name.substring(1)}DaoImpl extends MultiEntityDaoImpl implements ${table.name.substring(0, 1).toUpCase()}${table.name.substring(1)}Dao{

    @Autowired
    private IdGenerator idGenerator;

    @Override
    protected Class<? extends MultiEntity<?>> forClass() {
        return ${table.name.substring(0, 1).toUpCase()}${table.name.substring(1)}.class;
    }

    @Override
    protected void initMaxId() {
        Long maxId = jdbc.queryForObject("select max( ${table.primaryKey.name}) from ${table.name}", Long.class);
        AtomicLong base = null;
        if (maxId == null || maxId <= 0) {
            base = new AtomicLong(UniqueId.otherId(GameConfig.getServerId(), GameConfig.getServerType()));
        } else {
            base = new AtomicLong(maxId);
        }
        idGenerator.init(IdentiyKey.build(this.getClass()), base);
    }

    @Override
    public Collection<${table.name.substring(0, 1).toUpCase()}${table.name.substring(1)}> get${table.name.substring(0, 1).toUpCase()}${table.name.substring(1)}List(long actorId) {
        Map<IdentiyKey, ${table.name.substring(0, 1).toUpCase()}${table.name.substring(1)}> map = this.getByFk(actorId);
        return map.values();
    }

    @Override
    public ${table.name.substring(0, 1).toUpCase()}${table.name.substring(1)} get${table.name.substring(0, 1).toUpCase()}${table.name.substring(1)}(long actorId, long targetId) {
        ${table.name.substring(0, 1).toUpCase()}${table.name.substring(1)} result = this.getMultiEnity(actorId, IdentiyKey.build(targetId));
        return result;
    }

    @Override
    public Pet create${table.name.substring(0, 1).toUpCase()}${table.name.substring(1)}(long actorId, int configId, int level, int aptitude, Map<Integer, Integer> attributeAptitudeMap) {
        long petId = this.idGenerator.increment(IdentiyKey.build(this.getClass()));
        Pet pet = Pet.valueOf(actorId, petId, configId, level, aptitude, attributeAptitudeMap);
        this.updateQueue(pet);
        return pet;
    }

    @Override
    public void delete${table.name.substring(0, 1).toUpCase()}${table.name.substring(1)}(long actorId, Collection<Long> targetIds, OperationType operationType) {
        for (Long id : targetIds) {
            ${table.name.substring(0, 1).toUpCase()}${table.name.substring(1)} result = this.getPet(actorId, id);
            GameOssLogger.goodsDecrease(actorId, operationType, RewardType.${table.name.toUpCase()}, result.getPetId(), pet.getConfigId(), 1, 1);
            this.delete(pet);
        }
    }
}