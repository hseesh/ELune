package cn.daxiang.lyltd.gameserver.module.${table.name}.dao.impl;

import cn.daxiang.framework.database.SingleEntity;
import cn.daxiang.framework.database.dao.SingleEntityDaoImpl;
import cn.daxiang.framework.identity.IdentiyKey;
import cn.daxiang.lyltd.gameserver.core.database.table.${table.name.substring(0, 1).toUpperCase()}${table.name.substring(1)};
import cn.daxiang.lyltd.gameserver.module.${table.name}.dao.${table.name.substring(0, 1).toUpperCase()}${table.name.substring(1)}Dao;
import org.springframework.stereotype.Component;

/**
 * ${table.comment}
 * @author $!{author}
 * @since ${now}
 */
@Component
public class ${table.name.substring(0, 1).toUpperCase()}${table.name.substring(1)}DaoImpl extends SingleEntityDaoImpl implements ${table.name.substring(0, 1).toUpperCase()}${table.name.substring(1)}Dao{

    @Override
    protected Class<? extends SingleEntity<?>> forClass() {
        return ${table.name.substring(0, 1).toUpperCase()}${table.name.substring(1)}.class;
    }

    @Override
    protected void initMaxId() {
    }

    @Override
    public ${table.name.substring(0, 1).toUpperCase()}${table.name.substring(1)} get${table.name.substring(0, 1).toUpperCase()}${table.name.substring(1)}(long actorId, long targetId) {
        ${table.name.substring(0, 1).toUpperCase()}${table.name.substring(1)} ${table.name} = new ${table.name.substring(0, 1).toUpperCase()}${table.name.substring(1)}();
        this.updateQueue(${table.name});
        return ${table.name};
    }

    @Override
    public ${table.name.substring(0, 1).toUpperCase()}${table.name.substring(1)} create${table.name.substring(0, 1).toUpperCase()}${table.name.substring(1)} ${table.valueOf};
        ${table.name.substring(0, 1).toUpperCase()}${table.name.substring(1)} ${table.name} = ${table.name.substring(0, 1).toUpperCase()}${table.name.substring(1)}.valueOf(#foreach($item in $table.fields)${item.name}#if($foreach.hasNext),#end#end);
        this.updateQueue(${table.name});
        return ${table.name};
    }

    @Override
    public boolean isExist(long actorId) {
        return this.get(IdentiyKey.build(actorId)) == null;
    }
}